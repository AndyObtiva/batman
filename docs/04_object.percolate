## Batman.Object

`Batman.Object` is the superclass for virtually all objects in a Batman application. `Batman.Object` mixes in `Batman.Observable` and `Batman.EventEmitter` for things like `get`, `set`, `observe`, and `fire`, and then defines some more useful things for tying everything together.

### constructor(objects...)

To create a new `Batman.Object`, the `Batman.Object` constructor can be used, or, the `Batman` namespace is also a utility function for creating Batman objects. Each object passed in to the constructor will have all its properties applied to the new `Batman.Object` using `get` and `set`, so any custom getters or setters will be respected. Objects passed in last will have precedence over objects passed in first in the event that they share the same keys. The property copy from these objects is shallow.

!!!
test 'Batman() function allows for handy creation of Batman.Objects', ->
  show object = Batman(foo: 'bar')
  equal typeof object.get, 'function'
!!!

!!!
test 'Batman.Object constructor function accepts multiple mixin arguments and later mixins take precedence.', ->
  show song = Batman({length: 100, bpm: 120}, {bpm: 130})
  equal song.get('length'), 100
  equal song.get('bpm'), 130, "The property from the second object passed to the constructor overwrites that from the first."
!!!

### toJSON() : object

`toJSON` returns a vanilla JavaScript object representing this `Batman.Object`.

!!!
test 'toJSON returns a vanilla JS object', ->
  show object = Batman(foo: 'bar')
  deepEqual object.toJSON(), {foo: 'bar'}
!!!


### hashKey(): string

`hashKey` returns a unique string representing this particular `Batman.Object`. No two `Batman.Object`s will have the same `hashKey`.

### accessor([keys...], objectOrFunction) ->

`accessor` is used to define custom getters and setters for one, many, or all properties on an object.

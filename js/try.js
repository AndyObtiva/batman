// Generated by CoffeeScript 1.3.3
(function() {
  var cm, files,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $('<script src="lib/dist/batman.jquery.js"></script>').appendTo('head');

  $('<script src="js/codemirror.js"></script>').appendTo('head');

  $('<script src="js/modes/javascript.js"></script>').appendTo('head');

  $('<link rel="stylesheet" href="css/codemirror.css" />').appendTo('head');

  cm = CodeMirror($('.code-editor-text').html('')[0], {
    value: "var foo = 'bar'\nfoo += 'baz'",
    mode: "javascript"
  });

  window.Try = (function(_super) {

    __extends(Try, _super);

    function Try() {
      return Try.__super__.constructor.apply(this, arguments);
    }

    Try.dispatcher = false;

    Try.navigator = false;

    Try.layout = 'layout';

    return Try;

  })(Batman.App);

  Try.LayoutView = (function(_super) {

    __extends(LayoutView, _super);

    function LayoutView(options) {
      options.node = $('.intro')[0];
      LayoutView.__super__.constructor.apply(this, arguments);
    }

    LayoutView.prototype.showFile = function(file) {
      if (file.get('isDirectory')) {
        return file.set('isExpanded', !file.get('isExpanded'));
      } else {
        return this.set('currentFile', file);
      }
    };

    return LayoutView;

  })(Batman.View);

  Try.File = (function(_super) {

    __extends(File, _super);

    function File() {
      return File.__super__.constructor.apply(this, arguments);
    }

    File.encode('name', 'content', 'isDirectory');

    File.accessor('children', function() {
      return new Batman.Set(new Try.File({
        name: 'foo',
        isDirectory: false
      }), new Try.File({
        name: 'bar',
        isDirectory: false
      }));
    });

    return File;

  })(Batman.Model);

  Try.FileView = (function(_super) {

    __extends(FileView, _super);

    function FileView() {
      return FileView.__super__.constructor.apply(this, arguments);
    }

    FileView.prototype.html = "<div data-addclass-directory=\"file.isDirectory\" data-addclass-expanded=\"file.isExpanded\">\n	<a data-bind=\"file.name\" data-event-click=\"showFile | withArguments file\" class=\"file\"></a>\n	<ul data-showif=\"file.isDirectory\" data-renderif=\"file.isDirectory\">\n		<li data-foreach-file=\"file.children\">\n			<div data-view=\"FileView\"></div>\n		</li>\n	</ul>\n</div>";

    return FileView;

  })(Batman.View);

  files = new Batman.Set(new Try.File({
    name: 'rdio',
    isDirectory: true
  }));

  Try.set('files', files);

  Try.run();

}).call(this);

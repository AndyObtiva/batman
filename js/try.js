// Generated by CoffeeScript 1.3.3
(function() {
  var cm, steps,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $('<script src="lib/dist/batman.jquery.js"></script>').appendTo('head');

  $('<script src="lib/extras/batman.rails.js"></script>').appendTo('head');

  $('<script src="js/codemirror.js"></script>').appendTo('head');

  $('<script src="js/modes/javascript.js"></script>').appendTo('head');

  $('<link rel="stylesheet" href="css/codemirror.css" />').appendTo('head');

  cm = CodeMirror($('.code-editor-text').html('')[0], {
    value: "var foo = 'bar'\nfoo += 'baz'",
    mode: "javascript"
  });

  window.Try = (function(_super) {

    __extends(Try, _super);

    function Try() {
      return Try.__super__.constructor.apply(this, arguments);
    }

    Try.dispatcher = false;

    Try.navigator = false;

    Try.layout = 'layout';

    return Try;

  })(Batman.App);

  Try.LayoutView = (function(_super) {

    __extends(LayoutView, _super);

    function LayoutView(options) {
      options.node = $('.intro')[0];
      LayoutView.__super__.constructor.apply(this, arguments);
    }

    LayoutView.prototype.showFile = function(file) {
      if (file.get('isDirectory')) {
        return file.set('isExpanded', !file.get('isExpanded'));
      } else {
        return this.set('currentFile', file);
      }
    };

    LayoutView.accessor('currentStep', function() {
      return Try.get('steps.first');
    });

    return LayoutView;

  })(Batman.View);

  Try.File = (function(_super) {

    __extends(File, _super);

    function File() {
      return File.__super__.constructor.apply(this, arguments);
    }

    File.storageKey = 'app_files';

    File.resourceName = 'app_files';

    File.persist(Batman.RailsStorage);

    File.encode('name', 'content', 'isDirectory');

    File.encode('children', {
      decode: function(kids) {
        var kid, set, _i, _len;
        set = new Batman.Set;
        for (_i = 0, _len = kids.length; _i < _len; _i++) {
          kid = kids[_i];
          set.add((new Try.File).fromJSON(kid));
        }
        return set;
      }
    });

    File.prototype.isExpanded = false;

    return File;

  })(Batman.Model);

  Try.FileView = (function(_super) {

    __extends(FileView, _super);

    function FileView() {
      return FileView.__super__.constructor.apply(this, arguments);
    }

    FileView.prototype.html = "<a data-bind=\"file.name\" data-event-click=\"showFile | withArguments file\" class=\"file\" data-addclass-directory=\"file.isDirectory\"></a>\n<ul data-showif=\"file.isDirectory | and file.isExpanded\" data-renderif=\"file.isDirectory\">\n	<li data-foreach-file=\"file.children\">\n		<div data-view=\"FileView\"></div>\n	</li>\n</ul>";

    return FileView;

  })(Batman.View);

  Try.Step = (function(_super) {

    __extends(Step, _super);

    function Step() {
      return Step.__super__.constructor.apply(this, arguments);
    }

    return Step;

  })(Batman.Object);

  Try.ConsoleStep = (function(_super) {

    __extends(ConsoleStep, _super);

    function ConsoleStep() {
      return ConsoleStep.__super__.constructor.apply(this, arguments);
    }

    ConsoleStep.prototype.isConsole = true;

    return ConsoleStep;

  })(Try.Step);

  Try.CodeStep = (function(_super) {

    __extends(CodeStep, _super);

    function CodeStep() {
      return CodeStep.__super__.constructor.apply(this, arguments);
    }

    CodeStep.prototype.isCode = true;

    CodeStep.expect = function(regex, options) {};

    return CodeStep;

  })(Try.Step);

  Try.InitializeAppStep = (function(_super) {

    __extends(InitializeAppStep, _super);

    function InitializeAppStep() {
      return InitializeAppStep.__super__.constructor.apply(this, arguments);
    }

    InitializeAppStep.prototype.heading = "Welcome to Batman!";

    InitializeAppStep.prototype.body = "Let's build an app. We've created a brand new Rails app for you.";

    InitializeAppStep.prototype.task = "Start off by adding `batman-rails` to your gemfile.";

    InitializeAppStep.expect(/gem\w[\"\']batman\-rails[\"\']/, {
      "in": 'Gemfile'
    });

    return InitializeAppStep;

  })(Try.CodeStep);

  steps = new Batman.Set(new Try.InitializeAppStep);

  Try.set('steps', steps);

  Try.run();

}).call(this);
